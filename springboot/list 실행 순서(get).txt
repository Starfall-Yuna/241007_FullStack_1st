* "/book/list"나 "/book"으로 접속 시도
- @Controller에서 GET 방식의 "/book", "/book/list"와 연결된 함수 찾기
	(title과 page는 링크를 통해서 값 설정)
- 사용자에게 보여줄 데이터와 화면 정보를 담을 공간(mav) 마련
- mav에 사용자에게 보여줄 화면 정보(list.html) 저장
- 여러 개의 책 데이터를 담을 공간(many_books) 마련 + Service 함수 실행
	<BookService> 함수 실행 순서
	- 한 페이지에 표현할 최대 데이터를 담을 상수(pageSize) 선언
	- 여러 책 데이터를 저장할 List 형식의 공간(books) 마련
	- 현재 페이지 위치를 나타내는 p에 대한 처리 (리스트의 시작은 0)
		(사용자가 page 값 명시X :: 0으로 저장)
		(사용자가 page 값 명시O :: 1을 빼서 정상적인 접근 하게 함)
	- 사용자가 제시한 검색어(t)에 따른 데이터 처리 진행
		(사용자가 title 값 명시X :: 
		1. 데이터 생성 시점을 기준으로 내림차순 정렬
		2. 한 페이지에 표현O 최대 개수를 참고-> 표현할 페이지 형식(pa) 구성
		3. DB의 모든 책 데이터를 불러오기-> pa를 참고하여 필요한 데이터 추출(books) )
		(사용자가 title 값 명시O :: 
		1. 표현할 페이지 형식(pa) 구성 - 한 페이지에 표현되는 최대 개수 & 현재 페이지 )
		2. 정렬 기준(s)을 설정 :: 데이터 생성 시점을 기준으로 내림차순 정렬
		3. pa에 대해 데이터 정렬 기준을 설정
		4. DB 데이터 중 t를 포함하는 데이터만 추출 (books) )
	- books의 원소들에 대해 각각을 DTO 객체로 변환하여 리턴
		(목록으로 출력하기 위한 최적의 형태로 전송하기 위함)
		(4종류의 데이터 중에서, 2종류의 데이터(id, title)만 사용자에게 보여주기 위함)
- 전체 데이터 또는 검색 결과를 many_books에 저장
- mav에 사용자에게 보여줄 데이터(many_books) 저장
- mav에 있는 내용을 기반으로, 사용자에게 응답 수행