* "localhost:8080/book/read/(임의의 숫자)" 접속
- @Controller에서 GET 방식의 "/book/read/{id}" 링크와 연결된 함수 찾기
- read() 함수 실행 이전에, 링크에 있는 id값을 매개변수로 받아오기
- 사용자에게 보여줄 화면 정보(View)와 필요한 데이터(Model)를 저장할 공간(mav) 마련
- id값을 전달하면서, service에 있는 read() 함수 실행
	<BookService>에서의 수행 내용
	- 전달받은 id값을 책 번호(book_id)의 값으로 갖는 데이터 검색
	- 검색한 결과를 Book 엔티티의 형식대로 임의의 객체(b)에 저장
	- 프로젝트 내부 상, 5개의 책 정보를 전달할 수 있는 공간 마련
		(5개의 정보 :: 책 id값, 제목, 가격, 생성시간, 책에 대한 댓글들(List<BookLog>))
			(댓글에 있는 정보(5) :: 댓글 id값, 내용, 페이지, 생성시간, 표시할 텍스트)
	- brDTO의 각 멤버들에게 Book 엔티티의 정보(b)를 하나씩 저장 (frombook() 함수)
		(DB로부터 받은 정보를 프로젝트 내부 파일 간 주고받을 정보 형식인 DTO에 저장)
	- DB 상 검색 정보를 포함하고 있는 brDTO를 컨트롤러로 반환
- 반환받은 검색 정보를 컨트롤러의 brDTO에 저장
- mav에서 필요한 데이터 값(Model)을, 위에서 전달받은 검색 결과(컨트롤러의 brDTO)로 저장
- mav에서 필요한 화면 정보(View)를, book/read.html로 설정
- return mav;	
	=> 저장된 Model과 View를 기반으로, 사용자에게 화면 표시